// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  password String
  isActive Boolean @default(false) @map("is_active")

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id])

  creatorData  CreatorData?
  supplierData SupplierData?

  projects Project[]

  asignedTags ProjectTag[]  

  cart Cart?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Role {
  id   String @id @default(uuid())
  role String @unique
  
  User User[]

  @@map("role")
}

model CreatorData {
  id        String  @id @default(uuid())
  firstName String  @map("first_name")
  surname   String
  userId    String  @unique @map("user_id")

  user User @relation(fields: [userId], references: [id])

  defaultPrice Decimal @default(15)
  currency      String  @default("AUD")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("creator_data")
}



model SupplierData {
  id           String @id @default(uuid())
  businessName String @map("business_name")
  userId       String @unique @map("user_id")

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("supplier_data")
}

model Project {
  id          String  @id @default(uuid())
  title       String
  description String

  ownerId String @map("owner_id")

  owner       User         @relation(fields: [ownerId], references: [id])
  images Image[]
  tags   ProjectTag[]

  cartProject CartProject[] 

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("project")
}

model Image {
  id          String  @id @default(uuid())
  title       String
  author      String
  price       Decimal
  currency    String @default("AUD")

  orderIndex Int @default(0)  @map("order_index")

  originalKey         String  @map("original_key")
  thumbnailKey         String  @map("thumbnail_key")

  originalUrl         String?  @map("original_url")
  thumbnailUrl         String?  @map("thumbnail_url")

  projectId String @map("project_id")

  project Project @relation(fields: [projectId], references: [id])

  cartImage CartProjectImage[] 

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("image")
}

model CartProjectImage {
  id          String  @id @default(uuid())
  cartProjectId      String  @map("cart_project_id")
  imageId       String  @map("image_id")

  


  cartProject       CartProject     @relation(fields: [cartProjectId], references: [id])
  image       Image     @relation(fields: [imageId], references: [id])


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([cartProjectId, imageId])
  @@map("cart_project_image")
}

model CartProject {
  id          String  @id @default(uuid())
  

  totalPrice       Decimal   @default(0) @map("total_price")
  currency        String @default("AUD")

  cartId      String  @map("cart_id")
  projectId       String  @map("project_id")

  cartProjectImage CartProjectImage[]

  cart       Cart     @relation(fields: [cartId], references: [id])
  project       Project     @relation(fields: [projectId], references: [id])


  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([cartId, projectId])
  @@map("cart_project")
}

model Cart {
  id          String  @id @default(uuid())
  


  userId      String   @unique @map("user_id")

  user User @relation(fields: [userId], references: [id])

  cartProject CartProject[]
  
  @@map("cart")
}

model ProjectTag {
  id          String  @id @default(uuid())
  projectId   String @map("project_id")
  tagId       String @map("tag_id")

  assignedAt  DateTime @default(now()) @map("assigned_at")
  assignedById  String     @map("assigned_by_id")

  user        User     @relation(fields: [assignedById], references: [id])

  project       Project     @relation(fields: [projectId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])


  // @@id([projectId, tagId])
  @@unique([projectId, tagId])
  @@map("project_tag")
}

model Tag {
  id          String  @id @default(uuid())
  title       String @unique

  projects   ProjectTag[]

  @@map("tag")
}























// model DefaultImagePrice {
//   id        String  @id @default(uuid())
//   value     String  

//   creatorId   String @unique @map("creator_id")

//   creator CreatorData @relation(fields: [creatorId], references: [id])

//   @@map("default_image_price")
// }

// model Project {
//   id          String  @id @default(uuid())
//   title       String
//   description String?

//   ownerId String @map("owner_id")

//   owner       User         @relation(fields: [ownerId], references: [id])
//   collections Collection[]

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("project")
// }

// model Collection {
//   id          String  @id @default(uuid())
//   title       String
//   description String?

//   projectId String @map("project_id")

//   project Project @relation(fields: [projectId], references: [id])
//   images Image[]

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("collection")
// }

// model Image {
//   id          String  @id @default(uuid())
//   url         String

//   collectionId String @map("collection_id")

//   collection Collection @relation(fields: [collectionId], references: [id])

//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   @@map("image")
// }